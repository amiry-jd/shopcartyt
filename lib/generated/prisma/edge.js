
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = {

};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/jd/src/github.com/amiry-jd/shopcartyt/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/jd/src/github.com/amiry-jd/shopcartyt/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.7.0",
  "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// model User {\n//   id        Int       @id @default(autoincrement())\n//   phone     String    @unique\n//   email     String?   @unique\n//   createdAt DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n// }\n\n// model Role {\n//   id        Int       @id @default(autoincrement())\n//   name      String    @unique\n//   createdAt DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n// }\n\n// model Product {\n//   id          Int         @id @default(autoincrement())\n//   name        String\n//   description String\n//   price       Float\n//   categoryId  Int\n//   Category    Category    @relation(fields: [categoryId], references: [id])\n//   OrderItems  OrderItem[]\n//   createdAt   DateTime    @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n// }\n\n// model Address {\n//   id          Int       @id @default(autoincrement())\n//   name        String\n//   email       String\n//   addressLine String\n//   city        String\n//   state       String\n//   zip         String\n//   isDefault   Boolean\n//   createdAt   DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n// }\n\n// model Author {\n//   id        Int        @id @default(autoincrement())\n//   name      String\n//   slug      String\n//   image     String\n//   bio       String\n//   createdAt DateTime   @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n//   BlogPost  BlogPost[]\n// }\n\n// model BlogCategory {\n//   id          Int       @id @default(autoincrement())\n//   title       String\n//   slug        String\n//   description String\n//   createdAt   DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n// }\n\n// model BlogPost {\n//   id          Int       @id @default(autoincrement())\n//   title       String\n//   slug        String\n//   content     String\n//   author      Author    @relation(fields: [authorId], references: [id])\n//   categories  String[]\n//   mainImage   String\n//   publishedAt String\n//   isLatest    Boolean\n//   createdAt   DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n//   authorId    Int\n// }\n\n// model Brand {\n//   id          Int       @id @default(autoincrement())\n//   name        String\n//   slug        String\n//   description String\n//   image       String\n//   website     String\n//   createdAt   DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n//   isActive    Boolean\n//   isFeatured  Boolean\n// }\n\n// model Category {\n//   id          Int        @id @default(autoincrement())\n//   name        String\n//   slug        String\n//   description String\n//   image       String\n//   createdAt   DateTime   @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt   DateTime?\n//   isActive    Boolean\n//   isFeatured  Boolean\n//   parentId    Int?\n//   parent      Category?  @relation(\"CategoryToParent\", fields: [categoryId], references: [id])\n//   children    Category[] @relation(\"CategoryToParent\")\n//   products    Product[]\n//   categoryId  Int?\n// }\n\n// model Order {\n//   id             Int         @id @default(autoincrement())\n//   userId         String\n//   orderNumber    String\n//   status         String\n//   total          Float\n//   tax            Float\n//   discount       Float\n//   currency       String\n//   paymentMethod  String\n//   paymentStatus  String\n//   shippingMethod String\n//   shippingStatus String\n//   trackingNumber String\n//   createdAt      DateTime    @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt      DateTime?\n//   items          OrderItem[]\n// }\n\n// model OrderItem {\n//   id        Int       @id @default(autoincrement())\n//   order     Order     @relation(fields: [orderId], references: [id])\n//   orderId   Int\n//   product   Product   @relation(fields: [productId], references: [id])\n//   productId Int\n//   quantity  Int\n//   price     Float\n//   total     Float\n//   createdAt DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n// }\n\n// model Review {\n//   id        Int       @id @default(autoincrement())\n//   productId Int\n//   userId    Int\n//   rating    Int\n//   comment   String\n//   createdAt DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n// }\n\n// model Wishlist {\n//   id        Int       @id @default(autoincrement())\n//   userId    Int\n//   productId Int\n//   createdAt DateTime  @default(dbgenerated(\"timezone('utc', now())\")) @db.Timestamp(6)\n//   updatedAt DateTime?\n// }\n",
  "inlineSchemaHash": "601b1f3aa2d64f6d1463cd38991935dacafcf95435d4b00d8ae5a5e4edcd9dd2",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

